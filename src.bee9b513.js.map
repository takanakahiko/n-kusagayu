{"version":3,"sources":["../node_modules/@geolonia/japanese-numeral/dist/oldJapaneseNumerics.js","../node_modules/@geolonia/japanese-numeral/dist/japaneseNumerics.js","../node_modules/@geolonia/japanese-numeral/dist/utils.js","../node_modules/@geolonia/japanese-numeral/dist/index.js","../node_modules/share-twitter/dist/index.js","index.ts"],"names":["Object","defineProperty","exports","value","shareTwitterURL","treat","str","replace","split","join","text","url","hashtags","via","related","replyTo","queries","filter","Boolean","baseURL"],"mappings":"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","file":"src.bee9b513.js","sourceRoot":"../src","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst oldJapaneseNumerics = {\n    零: '〇',\n    壱: '一',\n    壹: '一',\n    弐: '二',\n    貳: '二',\n    貮: '二',\n    参: '三',\n    參: '三',\n    肆: '四',\n    伍: '五',\n    陸: '六',\n    漆: '七',\n    捌: '八',\n    玖: '九',\n    拾: '十',\n    廿: '二十',\n    陌: '百',\n    佰: '百',\n    阡: '千',\n    仟: '千',\n    萬: '万',\n};\nexports.default = oldJapaneseNumerics;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst japaneseNumerics = {\n    〇: 0,\n    一: 1,\n    二: 2,\n    三: 3,\n    四: 4,\n    五: 5,\n    六: 6,\n    七: 7,\n    八: 8,\n    九: 9,\n};\nexports.default = japaneseNumerics;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.n2kan = exports.kan2n = exports.splitLargeNumber = exports.normalize = exports.smallNumbers = exports.largeNumbers = void 0;\nconst oldJapaneseNumerics_1 = require(\"./oldJapaneseNumerics\");\nconst japaneseNumerics_1 = require(\"./japaneseNumerics\");\nexports.largeNumbers = { '兆': 1000000000000, '億': 100000000, '万': 10000 };\nexports.smallNumbers = { '千': 1000, '百': 100, '十': 10 };\nfunction normalize(japanese) {\n    for (const key in oldJapaneseNumerics_1.default) {\n        const reg = new RegExp(key, 'g');\n        japanese = japanese.replace(reg, oldJapaneseNumerics_1.default[key]);\n    }\n    return japanese;\n}\nexports.normalize = normalize;\n/**\n * 漢数字を兆、億、万単位に分割する\n */\nfunction splitLargeNumber(japanese) {\n    let kanji = japanese;\n    const numbers = {};\n    for (const key in exports.largeNumbers) {\n        const reg = new RegExp(`(.+)${key}`);\n        const match = kanji.match(reg);\n        if (match) {\n            numbers[key] = kan2n(match[1]);\n            kanji = kanji.replace(match[0], '');\n        }\n        else {\n            numbers[key] = 0;\n        }\n    }\n    if (kanji) {\n        numbers['千'] = kan2n(kanji);\n    }\n    else {\n        numbers['千'] = 0;\n    }\n    return numbers;\n}\nexports.splitLargeNumber = splitLargeNumber;\n/**\n * 千単位以下の漢数字を数字に変換する（例: 三千 => 3000）\n *\n * @param japanese\n */\nfunction kan2n(japanese) {\n    let kanji = japanese;\n    let number = 0;\n    for (const key in exports.smallNumbers) {\n        const reg = new RegExp(`(.*)${key}`);\n        const match = kanji.match(reg);\n        if (match) {\n            let n = 1;\n            if (match[1]) {\n                n = japaneseNumerics_1.default[match[1]];\n            }\n            number = number + (n * exports.smallNumbers[key]);\n            kanji = kanji.replace(match[0], '');\n        }\n    }\n    if (kanji) {\n        number = number + japaneseNumerics_1.default[kanji];\n    }\n    return number;\n}\nexports.kan2n = kan2n;\n/**\n * Converts number less than 10000 to kanji.\n *\n * @param num\n */\nfunction n2kan(num) {\n    const kanjiNumbers = Object.keys(japaneseNumerics_1.default);\n    let number = num;\n    let kanji = '';\n    for (const key in exports.smallNumbers) {\n        const n = Math.floor(number / exports.smallNumbers[key]);\n        if (n) {\n            number = number - (n * exports.smallNumbers[key]);\n            if (1 === n) {\n                kanji = `${kanji}${key}`;\n            }\n            else {\n                kanji = `${kanji}${kanjiNumbers[n]}${key}`;\n            }\n        }\n    }\n    if (number) {\n        kanji = `${kanji}${kanjiNumbers[number]}`;\n    }\n    return kanji;\n}\nexports.n2kan = n2kan;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.findKanjiNumbers = exports.number2kanji = exports.kanji2number = void 0;\nconst utils_1 = require(\"./utils\");\nconst japaneseNumerics_1 = require(\"./japaneseNumerics\");\nfunction kanji2number(japanese) {\n    japanese = utils_1.normalize(japanese);\n    if (japanese.match('〇')) {\n        for (const key in japaneseNumerics_1.default) {\n            const reg = new RegExp(key, 'g');\n            japanese = japanese.replace(reg, japaneseNumerics_1.default[key].toString());\n        }\n        return Number(japanese);\n    }\n    else {\n        let number = 0;\n        const numbers = utils_1.splitLargeNumber(japanese);\n        // 万以上の数字を数値に変換\n        for (const key in utils_1.largeNumbers) {\n            if (numbers[key]) {\n                const n = utils_1.largeNumbers[key] * numbers[key];\n                number = number + n;\n            }\n        }\n        if (!Number.isInteger(number) || !Number.isInteger(numbers['千'])) {\n            throw new TypeError('The attribute of kanji2number() must be a Japanese numeral as integer.');\n        }\n        // 千以下の数字を足す\n        return number + numbers['千'];\n    }\n}\nexports.kanji2number = kanji2number;\nfunction number2kanji(num) {\n    if (!num.toString().match(/^[0-9]+$/)) {\n        throw new TypeError('The attribute of number2kanji() must be integer.');\n    }\n    const kanjiNumbers = Object.keys(japaneseNumerics_1.default);\n    let number = num;\n    let kanji = '';\n    // 万以上の数字を漢字に変換\n    for (const key in utils_1.largeNumbers) {\n        const n = Math.floor(number / utils_1.largeNumbers[key]);\n        if (n) {\n            number = number - (n * utils_1.largeNumbers[key]);\n            kanji = `${kanji}${utils_1.n2kan(n)}${key}`;\n        }\n    }\n    if (number) {\n        kanji = `${kanji}${utils_1.n2kan(number)}`;\n    }\n    return kanji;\n}\nexports.number2kanji = number2kanji;\nfunction findKanjiNumbers(text) {\n    const basePattern = '([一二三四五六七八九]+千)?([一二三四五六七八九]*百)?([一二三四五六七八九]*十)?([〇一二三四五六七八九]+)?';\n    const pattern = `(${basePattern}兆)?(${basePattern}億)?(${basePattern}万)?${basePattern}`;\n    const regex = new RegExp(pattern, 'g');\n    const match = text.match(regex);\n    if (match) {\n        return match.filter((item) => {\n            if (item.length) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        });\n    }\n    else {\n        return [];\n    }\n}\nexports.findKanjiNumbers = findKanjiNumbers;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.shareTwitterURL = void 0;\nconst treat = (str, { replace = '' } = {}) => str.split(' ').join(replace);\nexports.shareTwitterURL = ({ text, url, hashtags, via, related, replyTo }) => {\n    const baseURL = 'https://twitter.com/intent/tweet';\n    const hasText = text && `text=${treat(text, { replace: '%20' })}`;\n    const hasUrl = url && `url=${url}`;\n    const hasHashtags = hashtags && `hashtags=${treat(hashtags)}`;\n    const hasVia = via && `via=${via}`;\n    const hasRelated = related && `related=${related}`;\n    const hasReplyTo = replyTo && `in-reply-to=${replyTo}`;\n    const arr = [hasText, hasUrl, hasHashtags, hasVia, hasRelated, hasReplyTo];\n    const filtering = arr.filter(Boolean);\n    const queries = filtering.join('&');\n    return `${baseURL}?${queries}`;\n};\n","import { number2kanji } from '@geolonia/japanese-numeral'\nimport { shareTwitterURL } from 'share-twitter'\n\nfunction getRandomInt() {\n    let max = 1\n    for(var i =0; i < 10; i++){\n        if(Math.random() < 0.15){\n            max *= 10\n        }\n    }\n    return Math.floor(Math.random() * Math.floor(max))\n}\n\ndocument.getElementById(\"tweet-button\").addEventListener(\"click\", e => {\n    const n = getRandomInt()\n    const kanji = n==0 ? \"零 -ZERO- \" : number2kanji(n)\n    let text = `${kanji}草粥(${n}草粥)`\n    if( Math.random() < 0.03) {\n        text = `あ ほ く さ 粥`\n    }\n    if( Math.random() < 0.03) {\n        text = `浅草粥`\n    }\n    if( Math.random() < 0.03) {\n        text = `みちくさ粥`\n    }\n    if( Math.random() < 0.03) {\n        text = `たまゆら粥`\n    }\n    if( Math.random() < 0.03) {\n        text = `700,000,000,000,000,000,000,000 (セブンハンドレッドセクスティリオン)草粥`\n    }\n    const url = shareTwitterURL({\n        text: text,\n        hashtags: \"nanakusagacha\",\n        url: 'https://takanakahiko.me/n-kusagayu',\n    })\n    window.open(url)\n})\n"]}